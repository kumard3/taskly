generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for NextAuth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    comments      Comment[]
    password      String?
    team          Team?          @relation(fields: [teamId], references: [id])
    teamId        String?
    tasks         Task[]         @relation("createdBy")
    projects      Project[]
    memberships   Membership[]
    Workspace     Workspace[]
    notifications Notification[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@index([id], name: "user_id_index")
    @@index([email], name: "user_email_index")
}

model Workspace {
    id           String         @id @default(cuid())
    name         String?
    description  String?
    projects     Project[]
    memberships  Membership[]
    CustomStatus CustomStatus[]
    Task         Task[]
    user         User?          @relation(fields: [userId], references: [id])
    userId       String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
}

model Membership {
    id          String     @id @default(cuid())
    user        User?      @relation(fields: [userId], references: [id])
    userId      String?
    workspace   Workspace? @relation(fields: [workspaceId], references: [id])
    workspaceId String?
    role        String?    @default("MEMBER")
    permissions String[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@unique([userId, workspaceId])
}

model Task {
    id            String       @id @default(cuid())
    title         String
    description   String?
    priority      String?
    dueDate       DateTime?
    assignedTo    String?
    status        String?
    comments      Comment[]
    attachments   FileUpload[]
    collaborators String[]

    // Direct relationship to User
    createdBy   User   @relation("createdBy", fields: [createdById], references: [id])
    createdById String

    project      Project? @relation(fields: [projectId], references: [id])
    projectId    String?
    parentTask   Task?    @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
    parentTaskId String?
    subTasks     Task[]   @relation("TaskHierarchy")

    dependenciesAsDependentTask  Dependency[]  @relation("DependentTask")
    dependenciesAsDependencyTask Dependency[]  @relation("DependencyTask")
    WorkSpace                    Workspace?    @relation(fields: [workSpaceId], references: [id])
    workSpaceId                  String?
    columnPosition               Int?          @default(0)
    customFields                 CustomField[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id], name: "task_id_index")
}

model CustomField {
    id        String   @id @default(cuid())
    task      Task     @relation(fields: [taskId], references: [id])
    taskId    String
    key       String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Dependency {
    id               String    @id @default(cuid())
    dependentTask    Task      @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
    dependentTaskId  String
    dependencyTask   Task      @relation("DependencyTask", fields: [dependencyTaskId], references: [id], onDelete: Cascade)
    dependencyTaskId String
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    deletedAt        DateTime?

    @@unique([dependentTaskId, dependencyTaskId])
}

model CustomStatus {
    id        String      @id @default(cuid())
    name      String?
    color     String?
    position  String?
    WorkSpace Workspace[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@index([id], name: "custom_status_id_index")
}

model Comment {
    id           String       @id @default(cuid())
    message      String?
    files        FileUpload[]
    userInitials String?
    task         Task?        @relation(fields: [taskId], references: [id])
    taskId       String?
    user         User?        @relation(fields: [userId], references: [id])
    userId       String?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
}

model FileUpload {
    id        String   @id @default(cuid())
    name      String?
    url       String?
    type      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?
    task      Task?    @relation(fields: [taskId], references: [id])
    taskId    String?
}

model Project {
    id          String     @id @default(cuid())
    name        String?
    description String?
    team        Team?      @relation(fields: [teamId], references: [id])
    teamId      String?
    tasks       Task[]
    user        User       @relation(fields: [userId], references: [id])
    userId      String
    workspace   Workspace? @relation(fields: [workspaceId], references: [id])
    workspaceId String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Team {
    id        String    @id @default(cuid())
    teamName  String
    members   User[]
    projects  Project[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Notification {
    id        String   @id @default(cuid())
    type      String
    message   String
    read      Boolean  @default(false)
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum RequestStatus {
    TO_DO
    IN_PROGRESS
    ISSUES
    COMPLETED
    OVERDUE
}
