// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
    id         String       @id @default(cuid())
    name       String?
    projects   Project[]
    Membership Membership[]
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
}

model Membership {
    id          String     @id @default(cuid())
    user        User?      @relation(fields: [userId], references: [id])
    userId      String?
    workspace   Workspace? @relation(fields: [workspaceId], references: [id])
    workspaceId String?
    role        String?    @default("MEMBER")
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@unique([userId, workspaceId])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    status        CustomStatus[]
    sessions      Session[]
    tasks         Task[]
    comments      Comment[]
    password      String?
    Team          Team?           @relation(fields: [teamId], references: [id])
    teamId        String?
    project       Project[]
    taskAssigneTo TaskAssigneTo[]
    Membership    Membership[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id            String       @id @default(cuid())
    title         String
    description   String?
    priority      String?
    notes         String?
    dueDate       String?
    assigned_to   String?
    status        String?      @default("TO_DO")
    Comments      Comment[]
    Attachment    FileUpload[]
    createdBy     String?
    collaborators String[]

    projects     String?
    project      Project[]
    // Hierarchical structure
    parentTask   Task?     @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
    parentTaskId String?
    subTasks     Task[]    @relation("TaskHierarchy")

    // Dependencies
    dependenciesAsDependentTask  Dependency[] @relation("DependentTask")
    dependenciesAsDependencyTask Dependency[] @relation("DependencyTask")

    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    User            User?          @relation(fields: [userId], references: [id])
    userId          String?
    TaskAssigneTo   TaskAssigneTo? @relation(fields: [taskAssigneToId], references: [id])
    taskAssigneToId String?
    Assignee        Assignee[]

    @@index([id], name: "task_id_index")
}

model Dependency {
    id               String   @id @default(cuid())
    dependentTask    Task?    @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
    dependentTaskId  String?
    dependencyTask   Task?    @relation("DependencyTask", fields: [dependencyTaskId], references: [id], onDelete: Cascade)
    dependencyTaskId String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@unique([dependentTaskId, dependencyTaskId])
}

model CustomStatus {
    id        String   @id @default(cuid())
    status    String[] @default(["TO_DO", "IN_PROGRESS", "ISSUES", "COMPLETED"])
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId])
    @@index([userId])
}

model TaskAssigneTo {
    id     String   @id @default(cuid())
    user   User?    @relation(fields: [userId], references: [id])
    userId String?
    task   Task[]
    taskId String[]
}

model Assignee {
    id     String  @id @unique @default(cuid())
    task   Task?   @relation(fields: [taskId], references: [id])
    taskId String?
    name   String?
    email  String?
}

model Comment {
    id      String       @id @default(cuid())
    message String?
    file    FileUpload[]
    task    Task?        @relation(fields: [taskId], references: [id])
    taskId  String?

    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FileUpload {
    id        String   @id @default(cuid())
    filename  String?
    mimetype  String?
    url       String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?
    Task      Task?    @relation(fields: [taskId], references: [id])
    taskId    String?
}

model Project {
    id          String     @id @default(cuid())
    name        String?
    team        Team?      @relation(fields: [teamId], references: [id])
    teamId      String?
    tasks       Task[]
    User        User?      @relation(fields: [userId], references: [id])
    userId      String?
    Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
    workspaceId String?
}

model Team {
    id       String    @id @default(cuid())
    teamName String
    members  User[]
    projects Project[]
}

enum RequestStatus {
    TO_DO
    IN_PROGRESS
    ISSUES
    COMPLETED
    OVERDUE
}
